{
  "name": "tty-table",
  "tagline": "CLI table for nodejs and the browser. Automatic word wrap, padding, alignment, colors, Asian character support, per-column callbacks, and you can pass rows as objects or arrays.",
  "body": "# tty-table\r\n\r\n[![Build Status](https://travis-ci.org/tecfu/tty-table.svg?branch=master)](https://travis-ci.org/tecfu/tty-table) [![Dependency Status](https://david-dm.org/tecfu/tty-table.png)](https://david-dm.org/tecfu/tty-table) [![NPM version](https://badge.fury.io/js/tty-table.svg)](http://badge.fury.io/js/tty-table) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n\r\nA terminal table widget for nodejs and the browser.\r\n\r\n## Installation\r\n\r\n- Nodejs\r\n\r\n```\r\nnpm install tty-table\r\n```\r\n\r\n- Browser (via browserify)\r\n\r\n```\r\n<script src=\"tty-table.bundle.min.js\"></script>\r\n<script>\r\n\tvar Table = require('tty-table');\r\n\t...\r\n</script>\r\n```\r\n\r\n## Why\r\n\r\n- Automatic text wrapping\r\n- Colors (nodejs)\r\n- Optional callbacks on column values\r\n- Header, body column alignment\r\n- Padding\r\n- Pass rows as either arrays or objects\r\n- [Works in the browser as well as nodejs](http://htmlpreview.github.io/?https://raw.githubusercontent.com/tecfu/tty-table/master/examples/browser-example.html)\r\n- [Supports Asian characters](https://github.com/tecfu/tty-table/pull/5) \r\n- [Responsive](https://github.com/tecfu/tty-table/issues/4)\r\n\r\n## Example Output\r\n\r\n### Terminal\r\n![Terminal Example](examples/images/node-example.png \"Terminal Example\") \r\n\r\n### Browser & Browser Console \r\n![Browser Console Example](examples/images/browser-example.png \"Browser Console Example\") \r\n\r\n[Working example](http://htmlpreview.github.io/?https://raw.githubusercontent.com/tecfu/tty-table/master/examples/browser-example.html)\r\n\r\n> Note that neither ASCI colors nor default borders are rendered in the browser.\r\n> An alternative border style, as shown below, can be used by setting the option:\r\n>\r\n> ```\r\n> borderStyle : 2\r\n> ```\r\n\r\n## Example Usage\r\n\r\n<!--EXAMPLE-USAGE-->\r\n\r\n```\r\nvar Table = require('tty-table');\r\nvar chalk = require('chalk');\r\n\r\nvar header = [\r\n\t{\r\n\t\tvalue : \"item\",\r\n\t\theaderColor : \"cyan\",\r\n\t\tcolor: \"yellow\",\r\n\t\talign : \"left\",\r\n\t\tpaddingRight : 5,\r\n\t\twidth : 30\r\n\t},\r\n\t{\r\n\t\tvalue : \"price\",\r\n\t\tcolor : \"red\", \r\n\t\tformatter : function(value){\r\n\t\t\tvar str = \"$\" + value.toFixed(2);\r\n\t\t\tif(value > 5){\r\n\t\t\t\tstr = chalk.underline.green(str);\r\n\t\t\t}\r\n\t\t\treturn str;\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\talias : \"Is organic?\",\t\r\n\t\tvalue : \"organic\",\r\n\t\tformatter : function(value){\r\n\t\t\tif(value === 'yes'){\r\n\t\t\t\tvalue = chalk.stripColor(value);\r\n\t\t\t\tvalue = chalk.green(value);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvalue = chalk.white.bgRed(value);\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n];\r\n\r\n//Example with arrays as rows \r\nvar rows = [\r\n\t[\"hamburger\",2.50,\"no\"],\r\n\t[\"el jefe's special cream sauce\",0.10,\"yes\"],\r\n\t[\"two tacos, rice and beans topped with cheddar cheese\",9.80,\"no\"],\r\n\t[\"apple slices\",1.00,\"yes\"],\r\n\t[\"ham sandwich\",1.50,\"no\"],\r\n\t[\"macaroni, ham and peruvian mozzarella\",3.75,\"no\"]\r\n];\r\n\r\nvar t1 = Table(header,rows,{\r\n\tborderStyle : 1,\r\n\tpaddingBottom : 0,\r\n\theaderAlign : \"center\",\r\n\talign : \"center\",\r\n\tcolor : \"white\"\r\n});\r\n\r\nstr1 = t1.render();\r\nconsole.log(str1);\r\n\r\n\r\n//Example with objects as rows \r\nvar rows = [\r\n\t{\r\n\t\titem : \"hamburger\",\r\n\t\tprice : 2.50,\r\n\t\torganic : \"no\"\r\n\t},\r\n\t{\r\n\t\titem : \"el jefe's special cream sauce\",\r\n\t\tprice : 0.10,\r\n\t\torganic : \"yes\"\r\n\t},\r\n\t{\r\n\t\titem : \"two tacos, rice and beans topped with cheddar cheese\",\r\n\t\tprice : 9.80,\r\n\t\torganic : \"no\"\r\n\t},\r\n\t{\r\n\t\titem : \"apple slices\",\r\n\t\tprice : 1.00,\r\n\t\torganic : \"yes\"\t\r\n\t},\t\r\n\t{\r\n\t\titem : \"ham sandwich\",\r\n\t\tprice : 1.50,\r\n\t\torganic : \"no\"\r\n\t},\r\n\t{\r\n\t\titem : \"macaroni, ham and peruvian mozzarella\",\r\n\t\tprice : 3.75,\r\n\t\torganic : \"no\"\r\n\t}\r\n];\r\n\r\nvar t2 = Table(header,rows,{\r\n\tborderStyle : 1,\r\n\tpaddingBottom : 0,\r\n\theaderAlign : \"center\",\r\n\talign : \"center\",\r\n\tcolor : \"white\"\r\n});\r\n\r\nvar str2 = t2.render();\r\nconsole.log(str2);\r\n\r\n```\r\n<!--END-EXAMPLE-USAGE-->\r\n\r\n## API Reference \r\n<!--API-REF-->\r\n\r\n<a name=\"Table\"></a>\r\n## Table ⇒ <code>[Table](#Table)</code>\r\n**Kind**: global class  \r\n**Note**: <a name=\"note\"/>\r\nDefault border character sets:\r\n```\r\n\t[\r\n\t\t[\r\n\t\t\t{v: \" \", l: \" \", j: \" \", h: \" \", r: \" \"},\r\n\t\t\t{v: \" \", l: \" \", j: \" \", h: \" \", r: \" \"},\r\n\t\t\t{v: \" \", l: \" \", j: \" \", h: \" \", r: \" \"}\r\n\t\t],\r\n\t\t[\r\n\t\t\t{v: \"│\", l: \"┌\", j: \"┬\", h: \"─\", r: \"┐\"},\r\n\t\t\t{v: \"│\", l: \"├\", j: \"┼\", h: \"─\", r: \"┤\"},\r\n\t\t\t{v: \"│\", l: \"└\", j: \"┴\", h: \"─\", r: \"┘\"}\r\n\t\t],\r\n\t\t[\r\n\t\t\t{v: \"|\", l: \"+\", j: \"+\", h: \"-\", r: \"+\"},\r\n\t\t\t{v: \"|\", l: \"+\", j: \"+\", h: \"-\", r: \"+\"},\r\n\t\t\t{v: \"|\", l: \"+\", j: \"+\", h: \"-\", r: \"+\"}\r\n\t\t]\r\n\t]\r\n```  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| header | <code>array</code> | [See example](#example-usage) |\r\n| header.column | <code>object</code> | Column options |\r\n| header.column.formatter | <code>function</code> | Runs a callback on each cell value in the parent column |\r\n| header.column.marginLeft | <code>number</code> | default: 0 |\r\n| header.column.marginTop | <code>number</code> | default: 0 |\r\n| header.column.maxWidth | <code>number</code> | default: 20 |\r\n| header.column.paddingBottom | <code>number</code> | default: 0 |\r\n| header.column.paddingLeft | <code>number</code> | default: 0 |\r\n| header.column.paddingRight | <code>number</code> | default: 0 |\r\n| header.column.paddingTop | <code>number</code> | default: 0 |\r\n| header.column.alias | <code>string</code> | Alernate header column name |\r\n| header.column.align | <code>string</code> | default: \"center\" |\r\n| header.column.color | <code>string</code> | default: terminal default color |\r\n| header.column.headerAlign | <code>string</code> | default: \"center\" |\r\n| header.column.headerColor | <code>string</code> | default: terminal default color |\r\n| rows | <code>array</code> | [See example](#example-usage) |\r\n| options | <code>object</code> | Table options |\r\n| options.borderStyle | <code>number</code> | default: 1 (0 = no border)  Refers to the index of the desired character set. |\r\n| options.borderCharacters | <code>array</code> | [See @note](#note) |\r\n\r\n**Example**  \r\n```\r\nvar Table = require('tty-table');\r\nTable(header,rows,options);\r\n```\r\n<a name=\"Table.render\"></a>\r\n### Table.render() ⇒ <code>String</code>\r\nRenders a table to a string\r\n\r\n**Kind**: static method of <code>[Table](#Table)</code>  \r\n**Example**  \r\n```\r\nvar str = t1.render(); \r\nconsole.log(str); //outputs table\r\n```\r\n\r\n<!--END-API-REF-->\r\n\r\n## Running tests\r\n\r\n```\r\ngrunt test\r\n```\r\n\r\n## Saving the output of new tests\r\n\r\n```\r\ngrunt st\r\n```\r\n\r\n## License\r\n\r\n[GPLv3 License](http://www.gnu.org/licenses/gpl-3.0.en.html)\r\n\r\nCopyright 2015, Tecfu. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}